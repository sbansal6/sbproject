<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>FeedExchange</title>

    <meta name="description" content="Source code generated using layoutit.com">
    <meta name="author" content="LayoutIt!">

    <link id="bootcss" rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootswatch/3.2.0/cosmo/bootstrap.min.css">
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <link rel="stylesheet" href="/stylesheets/blueimp-gallery.min.css">
    <!-- CSS to style the file input field as button and adjust the Bootstrap progress bars -->
    <link rel="stylesheet" href="/stylesheets/jquery.fileupload.css">
    <link rel="stylesheet" href="/stylesheets/jquery.fileupload-ui.css">
      <style>
          table {
              border: 1px solid #666;
              width: 100%;
          }
          th {
              background: #f8f8f8;
              font-weight: bold;
              padding: 2px;
          }

      </style>
  </head>
  <body>
    <div class="container-fluid">
  	<div class="row">
  		<div class="col-md-12">
  			<nav class="navbar navbar-default" role="navigation">
  				
  				
  			</nav>
  		</div>
  	</div>
  	<div class="row">

  		</div>
  	</div>
  	<div class="row">
  		
  		<div class="col-md-10">
         	 <div id="myDiagram" style="border: solid 1px gray; height: 300px"></div>
  		</div>
  	</div>
  	
</div>

    <script src="js/go.js"></script>
    <script src="js/jquery.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
   
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script src="/javascripts/uploader/jquery.ui.widget.js"></script>
    <!-- The Templates plugin is included to render the upload/download listings -->
    <script src="/javascripts/uploader/tmpl.min.js"></script>
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="/javascripts/uploader/load-image.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="/javascripts/uploader/canvas-to-blob.min.js"></script>
    <!-- Bootstrap JS is not required, but included for the responsive demo navigation -->
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
    <!-- blueimp Gallery script -->
    <script src="/javascripts/uploader/jquery.blueimp-gallery.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script src="/javascripts/uploader/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="/javascripts/uploader/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-image.js"></script>
    <!-- The File Upload audio preview plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-audio.js"></script>
    <!-- The File Upload video preview plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-video.js"></script>
    <!-- The File Upload validation plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-validate.js"></script>
    <!-- The File Upload user interface plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-ui.js"></script>
    <!-- The main application script -->
    <script src="/javascripts/uploader/main.js"></script>
    
<!-- The template to display files available for upload -->


<script id="code">

      
  var GO = go.GraphObject.make;  // for conciseness in defining templates

    diagram =  GO(go.Diagram, "myDiagram",  // must name or refer to the DIV HTML element
                    {
                        initialContentAlignment: go.Spot.Center,
                        allowDrop: true,  // must be true to accept drops from the Palette
                        "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                        "LinkRelinked": showLinkLabel,
                        "animationManager.duration": 600, // slightly longer than default (600ms) animation
                        "undoManager.isEnabled": true  // enable undo & redo
                    });

// diagram.nodeTemplateMap.add("Comment",
//             GO(go.Node, "Auto", nodeStyle(),{ movable: false,
//               copyable: false,
//               deletable: false },
//                     GO(go.Shape, "File",
//                             { fill: "#EFFAB4", stroke: null }),
//                     GO(go.TextBlock,
//                             {
//                                 margin: 5,
//                                 maxSize: new go.Size(200, NaN),
//                                 wrap: go.TextBlock.WrapFit,
//                                 textAlign: "center",
//                                 editable: true,
//                                 font: "bold 12pt Helvetica, Arial, sans-serif",
//                                 stroke: '#454545'
//                             },
//                             new go.Binding("text").makeTwoWay())
//                     // no ports, because no links are allowed to connect with a comment
//             ));

// helper definitions for node templates
    function nodeStyle() {
        return [
            // The Node.location comes from the "loc" property of the node data,
            // converted by the Point.parse static method.
            // If the Node.location is changed, it updates the "loc" property of the node data,
            // converting back using the Point.stringify static method.
            new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
            {
                // the Node.location is at the center of each node
                locationSpot: go.Spot.Center,
                //isShadowed: true,
                //shadowColor: "#888",
                // handle mouse enter/leave events to show/hide the ports
                mouseEnter: function (e, obj) { showPorts(obj.part, true); },
                mouseLeave: function (e, obj) { showPorts(obj.part, false); }
            }
        ];
    }


    // Define a function for creating a "port" that is normally transparent.
    // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
    // and where the port is positioned on the node, and the boolean "output" and "input" arguments
    // control whether the user can draw links from or to the port.
    function makePort(name, spot, output, input) {
        // the port is basically just a small circle that has a white stroke when it is made visible
        return GO(go.Shape, "Circle",
                {
                    fill: "transparent",
                    stroke: null,  // this is changed to "white" in the showPorts function
                    desiredSize: new go.Size(10, 10),
                    alignment: spot, alignmentFocus: spot,  // align the port on the main Shape
                    portId: name,  // declare this object to be a "port"
                    fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                    fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                    cursor: "pointer"  // show a different cursor to indicate potential link point
                });
    }


function showPorts(node, show) {
    var diagram = node.diagram;
    if (!diagram || diagram.isReadOnly || !diagram.allowLink) return;
    node.ports.each(function(port) {
        port.stroke = (show ? "white" : null);
    });}

// Make link labels visible if coming out of a "conditional" node.
    // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
    function showLinkLabel(e) {
        var label = e.subject.findObject("LABEL");
        if (label !== null) label.visible = (e.subject.fromNode.data.figure === "Diamond");
    }

diagram.nodeTemplateMap.add("Comment",
            GO(go.Node, "Auto", nodeStyle(),{ movable: false,
              copyable: false,
              deletable: false },
                    GO(go.Shape, "File",
                            { fill: "#EFFAB4", stroke: null }),
                    GO(go.TextBlock,
                            {
                                margin: 5,
                                maxSize: new go.Size(200, NaN),
                                wrap: go.TextBlock.WrapFit,
                                textAlign: "center",
                                editable: true,
                                font: "bold 12pt Helvetica, Arial, sans-serif",
                                stroke: '#454545'
                            },
                            new go.Binding("text").makeTwoWay())
                    // no ports, because no links are allowed to connect with a comment
            ));

diagram.nodeTemplateMap.add("SourceFile",
    GO(go.Node, "Auto",
      GO(go.Shape, "Rectangle", { fill: "lightgray" }),
      GO(go.Panel, "Table",


        GO(go.RowColumnDefinition,
          { column: 0, alignment: go.Spot.Left}),
        GO(go.RowColumnDefinition,
          { column: 2, alignment: go.Spot.Right }),
        GO(go.TextBlock,  // the node title
          { column: 0, row: 0, columnSpan: 3, alignment: go.Spot.Center,
            font: "bold 10pt sans-serif", margin: new go.Margin(4, 2) },
          new go.Binding("text", "key")),
        GO(go.Panel, "Horizontal",
          { column: 2, row: 1 ,margin: new go.Margin(4, 2) },
          GO(go.TextBlock, "Field1",{margin: new go.Margin(4, 2)}),  // "B" port label
          GO(go.Shape,  // the "A" port
            { width: 6, height: 6, portId: "A", toSpot: go.Spot.Right,fromLinkable: true })
        ),
        GO(go.Panel, "Horizontal",
          { column: 2, row: 2 ,margin: new go.Margin(4, 2) },
          GO(go.TextBlock, "Field2",{margin: new go.Margin(4, 2)}),  // "B" port label
          GO(go.Shape,  // the "B" port
            { width: 6, height: 6, portId: "B", toSpot: go.Spot.Right,fromLinkable: true }
            )
          
        ),
        GO(go.Panel, "Horizontal",
          { column: 2, row: 3, rowSpan: 2,margin: new go.Margin(4, 2)  },
          GO(go.TextBlock, "Out",{margin: new go.Margin(4, 2)}),  // "Out" port label
          GO(go.Shape,  // the "Out" port
            { width: 6, height: 6, portId: "Field3", fromSpot: go.Spot.Right,fromLinkable: true })
        )
      )
    ));

diagram.nodeTemplateMap.add("Destination",
    GO(go.Node, "Auto",
      GO(go.Shape, "Rectangle", { fill: "lightgray" }),
      GO(go.Panel, "Table",

    { defaultRowSeparatorStroke: "gray"
           },


        GO(go.RowColumnDefinition,
          { column: 0, alignment: go.Spot.Left}),
        GO(go.RowColumnDefinition,
          { column: 2, alignment: go.Spot.Right }),

        GO(go.TextBlock,  // the node title
          { column: 0, row: 0, columnSpan: 3, alignment: go.Spot.Center,
            font: "bold 10pt sans-serif", margin: new go.Margin(4, 2) },
          new go.Binding("text", "key")),

        GO(go.Panel, "Horizontal",
          { column: 0, row: 1 ,margin: new go.Margin(4, 2) },
          
          GO(go.Shape,  // the "A" port
            { width: 6, height: 6, portId: "A", toSpot: go.Spot.Left ,toLinkable: true, toMaxLinks: 1 }),
          GO(go.TextBlock, "Field1",{margin: new go.Margin(4, 2)})
        ),

        GO(go.Panel, "Horizontal",
          { column: 0, row: 2 ,margin: new go.Margin(4, 2) },
          
          GO(go.Shape,  // the "B" port
            { width: 6, height: 6, portId: "B", toSpot: go.Spot.Left,toLinkable: true, toMaxLinks: 1 }) ,
          GO(go.TextBlock, "Field2",{margin: new go.Margin(4, 2)})       
        ),

        GO(go.Panel, "Horizontal",
          { column: 0, row: 3, rowSpan: 2,margin: new go.Margin(4, 2)  },
          
          GO(go.Shape,  // the "Out" port
            { width: 6, height: 6, portId: "C", fromSpot: go.Spot.Left,toLinkable: true, toMaxLinks: 1 }),

          GO(go.TextBlock, "Out",{margin: new go.Margin(4, 2)})
        )
      )
    ));




  diagram.linkTemplate =
    GO(go.Link,
      { routing: go.Link.Orthogonal, corner: 3 },
      GO(go.Shape),
      GO(go.Shape, { toArrow: "Standard" })
    );

  diagram.layout = GO(go.LayeredDigraphLayout, { columnSpacing: 10 });
  diagram.initialContentAlignment = go.Spot.Center;

 // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
    diagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
    diagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;
    
  diagram.model =
    GO(go.GraphLinksModel,
      { linkFromPortIdProperty: "fromPort",  // required information:
        linkToPortIdProperty: "toPort",      // identifies data property names
        nodeDataArray: [
          { category: "SourceFile" ,key: "Add1" },
          { category: "SourceFile", key: "Add2" },
          { category: "Destination", key: "Subtract1" },
          { category: "Comment", text: "Comment" }
        ],
        linkDataArray: [
         
        ] });
   


    </script>
  </body>
</html>