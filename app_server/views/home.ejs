<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>FeedExchange</title>

    <meta name="description" content="Source code generated using layoutit.com">
    <meta name="author" content="LayoutIt!">

    <link id="bootcss" rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootswatch/3.2.0/cosmo/bootstrap.min.css">
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" />
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <link rel="stylesheet" href="/stylesheets/blueimp-gallery.min.css">
    <!-- CSS to style the file input field as button and adjust the Bootstrap progress bars -->
    <link rel="stylesheet" href="/stylesheets/jquery.fileupload.css">
    <link rel="stylesheet" href="/stylesheets/jquery.fileupload-ui.css">
  </head>
  <body>
    <div class="container-fluid">
  	<div class="row">
  		<div class="col-md-12">
  			<nav class="navbar navbar-default" role="navigation">
  				<div class="navbar-header">
  					 
  					<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
  						 <span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span>
  					</button> <a class="navbar-brand" href="#">FeedExchange</a>
  				</div>
  				
  				<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
  					<ul class="nav navbar-nav">
  						<li class="active">
  							<a href="#">Drive</a>
  						</li>
              <li class="active">
                <a href="#">Studio</a>
              </li>
              <li class="active">
                <a href="#">Admin</a>
              </li>
  						
  					</ul>
  					
  					<ul class="nav navbar-nav navbar-right">
  						<li>
  							<a href="#">Link</a>
  						</li>
  						<li class="dropdown">
  							 <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown<strong class="caret"></strong></a>
  							<ul class="dropdown-menu">
  								<li>
  									<a href="#">Action</a>
  								</li>
  								<li>
  									<a href="#">Another action</a>
  								</li>
  								<li>
  									<a href="#">Something else here</a>
  								</li>
  								<li class="divider">
  								</li>
  								<li>
  									<a href="#">Separated link</a>
  								</li>
  							</ul>
  						</li>
  					</ul>
  				</div>
  				
  			</nav>
  		</div>
  	</div>
  	<div class="row">
  		<div class="col-md-12">
  			<div>
  				 <button type="button" class="btn btn-success pull-right" onclick="getFileHeaders()">Run</button>
  			</div>
            <div>
  				<button type="button" class="btn btn-primary pull-right" onclick="save()">Save</button>
  			</div>
  		</div>
  	</div>
  	<div class="row">
  		<div class="col-md-2">
        		<div id="myPalette1" style="border: solid 1px gray; height: 600px">
            
        
          </div>
             
  		</div>
  		<div class="col-md-10">
         	 <div id="myDiagram" style="border: solid 1px gray; height: 600px"></div>
  		</div>
  	</div>
  	<div class="row">
  		<div class="col-md-6">
        <div style="border: solid 1px gray; height: 100%">
          <form id="fileupload" action="/upload" method="POST" enctype="multipart/form-data">
              <div class="row fileupload-buttonbar">
              <div class="col-md-6">
                  <!-- The fileinput-button span is used to style the file input field as button -->
                  <span class="btn btn-success fileinput-button">
                      <i class="glyphicon glyphicon-plus"></i>
                      <span>Add files...</span>
                      <input type="file" name="files[]" multiple>
                  </span>
                  <button type="submit" class="btn btn-primary start">
                      <i class="glyphicon glyphicon-upload"></i>
                      <span>Start upload</span>
                  </button>                  
                  <!-- The global file processing state -->
                  <span class="fileupload-process"></span>
              </div>
            <!-- The global progress state -->
              <div class="col-md-6 fileupload-progress fade">
                  <!-- The global progress bar -->
                  <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                      <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                  </div>
                  <!-- The extended global progress state -->
                  <div class="progress-extended">&nbsp;</div>
              </div>
              <table role="presentation" class="table"><tbody class="files"></tbody></table>
        </div>        
        </form>


        </div>
  		</div>
      <div class="col-md-6">
        <div style="border: solid 1px gray; height: 100px">
        Output
        </div>
      </div>
  	</div>
</div>

    <script src="js/go.js"></script>
    <script src="js/jquery.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
   
    <!-- The jQuery UI widget factory, can be omitted if jQuery UI is already included -->
    <script src="/javascripts/uploader/jquery.ui.widget.js"></script>
    <!-- The Templates plugin is included to render the upload/download listings -->
    <script src="/javascripts/uploader/tmpl.min.js"></script>
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="/javascripts/uploader/load-image.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="/javascripts/uploader/canvas-to-blob.min.js"></script>
    <!-- Bootstrap JS is not required, but included for the responsive demo navigation -->
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
    <!-- blueimp Gallery script -->
    <script src="/javascripts/uploader/jquery.blueimp-gallery.min.js"></script>
    <!-- The Iframe Transport is required for browsers without support for XHR file uploads -->
    <script src="/javascripts/uploader/jquery.iframe-transport.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="/javascripts/uploader/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-image.js"></script>
    <!-- The File Upload audio preview plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-audio.js"></script>
    <!-- The File Upload video preview plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-video.js"></script>
    <!-- The File Upload validation plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-validate.js"></script>
    <!-- The File Upload user interface plugin -->
    <script src="/javascripts/uploader/jquery.fileupload-ui.js"></script>
    <!-- The main application script -->
    <script src="/javascripts/uploader/main.js"></script>
    
<!-- The template to display files available for upload -->
<script id="template-upload" type="text/x-tmpl">
{% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td>
            <span class="preview"></span>
        </td>
        <td>
            <p class="name">{%=file.name%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">Processing...</p>
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
        </td>
        <td>
            {% if (!i && !o.options.autoUpload) { %}
                <button class="btn btn-primary start" disabled>
                    <i class="glyphicon glyphicon-upload"></i>
                    <span>Start</span>
                </button>
            {% } %}
            {% if (!i) { %}
                <button class="btn btn-warning cancel">
                    <i class="glyphicon glyphicon-ban-circle"></i>
                    <span>Cancel</span>
                </button>
            {% } %}
        </td>
    </tr>
{% } %}
</script>
<!-- The template to display files available for download -->
<script id="template-download" type="text/x-tmpl">
{% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-download fade">
        <td>
            <span class="preview">
                {% if (file.thumbnailUrl) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img src="{%=file.thumbnailUrl%}"></a>
                {% } %}
            </span>
        </td>
        <td>
            <p class="name">
                {% if (file.url) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" {%=file.thumbnailUrl?'data-gallery':''%}>{%=file.name%}</a>
                {% } else { %}
                    <span>{%=file.name%}</span>
                {% } %}
            </p>
            {% if (file.error) { %}
                <div><span class="label label-danger">Error</span> {%=file.error%}</div>
            {% } %}
        </td>
        <td>
            <span class="size">{%=o.formatFileSize(file.size)%}</span>
        </td>
        <td>
            {% if (file.deleteUrl) { %}
                <button class="btn btn-danger delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}"{% if (file.deleteWithCredentials) { %} data-xhr-fields='{"withCredentials":true}'{% } %}>
                    <i class="glyphicon glyphicon-trash"></i>
                    <span>Delete</span>
                </button>
                <input type="checkbox" name="delete" value="1" class="toggle">
            {% } else { %}
                <button class="btn btn-warning cancel">
                    <i class="glyphicon glyphicon-ban-circle"></i>
                    <span>Cancel</span>
                </button>
            {% } %}
        </td>
    </tr>
{% } %}
</script>

<script id="code">

var listFilesInDirectory = function(cb){
         $.get('/api/listdirectory',function(result,status){
          cb(null,result);        
          })}
    
var getFileHeaders  = function(fileName,cb){
       $.get('/api/fileheaders',{fileName:fileName},function(result,status){
         cb(null,result)
       })} 

  /**
   * Define soure file component :-
   * Properties:- 
   *    FileName : Select file from directory (Phase 1)
   *    Html :- Dynamic html for popup box (Phase 1)
   *    Fields:- Array of Fields in fileName, drop down check box (Phase 2), update html
   *    FileProperties: Define file properties like file type (Phase 2), update html
   * 
   */
   var SourceFileComponent = function(){
    var self = this ;
    this.category = "File"
    this.key = "Source"
    this.fileName = ""
    this.fields = []
    this.loc = "85 160"
    this.html = '<div title="Select File"> <form> FileName:<br> <select id="fileList" name="files"> </select> </form> </div>'
    this.editNode = function(e,obj){
      var html =  $(self.html)
      // add filenames to html

      listFilesInDirectory(function(err,result){
          alert("i am here")
          result.forEach(function(file){
            html.find('#fileList').append($('<option>' + file + '</option>'));
          })
       });
      $(html)
                .appendTo('body')
                .dialog({
                    modal: true,
                    width: 425,
                    height: 275,
                    buttons: {
                        OK: function(){
                            // todo:- have to refresh whole diagram to change selected file. 
                            var fileName = $('#fileList option:selected').text();
                            self.fileName = fileName ;
                            // get all headers for this file using server rest api call
                            var data = myDiagram.model.findNodeDataForKey(self.key)
                            var newFields = [] 
                            getFileHeaders(fileName,function(err,result){
                              result.headers.forEach(function(header){
                                newFields.push({ name:header, color: "#F7B84B", figure: "Ellipse"})
                              })
                              myDiagram.model.setDataProperty(data,"fields",newFields)
                              
                            });
                            $(this).dialog('close');
                        },
                        CANCEL : function(){
                            $(this).dialog('close');
                        }
                    }
                });
     }
  }

  var GoogleFeedDestination = function(){
      var self = this;
      this.category = "File",
      this.key = "Google",
      this.fields = [
         { name: "ProductID", color: "#F7B84B", figure: "Ellipse" },
         { name: "ProductName", color: "#F25022", figure: "Rectangle" },
         { name: "Color", color: "#00BCF2" ,figure: "Triangle" },
         { name: "Brand", color: "#F25022" ,figure: "Rectangle" },
         { name: "Description", color: "#00BCF2" ,figure: "Rectangle" }
     ],
     this.loc = "485 160"
  }
  

  var PackageModel = { 
       "class": "go.GraphLinksModel",
        "linkFromPortIdProperty": "fromPort",
        "linkToPortIdProperty": "toPort",
        "nodeDataArray": [
        new SourceFileComponent(),        
        new GoogleFeedDestination(),        
        ],
        "linkDataArray": [
      
        ]}
      
  var GO = go.GraphObject.make;  // for conciseness in defining templates
    myDiagram =  GO(go.Diagram, "myDiagram",  // must name or refer to the DIV HTML element
                    {
                        initialContentAlignment: go.Spot.Center,
                        allowDrop: true,  // must be true to accept drops from the Palette
                        "LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                        "LinkRelinked": showLinkLabel,
                        "animationManager.duration": 600, // slightly longer than default (600ms) animation
                        "undoManager.isEnabled": true  // enable undo & redo
                    });

    // when the document is modified, add a "*" to the title and enable the "Save" button
    myDiagram.addDiagramListener("Modified", function(e) {
        console.log("i am modified")
        var button = document.getElementById("SaveButton");
        if (button) button.disabled = !myDiagram.isModified;
        var idx = document.title.indexOf("*");
        if (myDiagram.isModified) {
            if (idx < 0) document.title += "*";
        } else {
            if (idx >= 0) document.title = document.title.substr(0, idx);
        }
    });

    // helper definitions for node templates
    function nodeStyle() {
        return [
            // The Node.location comes from the "loc" property of the node data,
            // converted by the Point.parse static method.
            // If the Node.location is changed, it updates the "loc" property of the node data,
            // converting back using the Point.stringify static method.
            new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
            {
                // the Node.location is at the center of each node
                locationSpot: go.Spot.Center,
                //isShadowed: true,
                //shadowColor: "#888",
                // handle mouse enter/leave events to show/hide the ports
                mouseEnter: function (e, obj) { showPorts(obj.part, true); },
                mouseLeave: function (e, obj) { showPorts(obj.part, false); }
            }
        ];
    }

    // dont need this anymore, every node has its own edit node function that called directly from node template
    /**
     * Open Node specific dialog box , html comes from node itself
     *
     */
    var editNode = function(e, obj) {
        alert("I am going via here")
        var html =  '<div> <form> FileName:<br> <input id="textInput" type="text" name="firstname"> </form> </div>'
        //obj.part.data.editNode();
         $(html)
                .appendTo('body')
                .dialog({
                    modal: true,
                    width: 425,
                    height: 275,
                    buttons: {
                        OK: function(){
                            var fileName = $('#textInput').val();
                            $(this).dialog('close');
                        },
                        CANCEL : function(){
                            $(this).dialog('close');
                        }
                    }
                });
     
    
    }

    // Define a function for creating a "port" that is normally transparent.
    // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
    // and where the port is positioned on the node, and the boolean "output" and "input" arguments
    // control whether the user can draw links from or to the port.
    function makePort(name, spot, output, input) {
        // the port is basically just a small circle that has a white stroke when it is made visible
        return GO(go.Shape, "Circle",
                {
                    fill: "transparent",
                    stroke: null,  // this is changed to "white" in the showPorts function
                    desiredSize: new go.Size(10, 10),
                    alignment: spot, alignmentFocus: spot,  // align the port on the main Shape
                    portId: name,  // declare this object to be a "port"
                    fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                    fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                    cursor: "pointer"  // show a different cursor to indicate potential link point
                });
    }

    // define the Node templates for regular nodes
    var lightText = 'whitesmoke';
    // define several shared Brushes
    var bluegrad = GO(go.Brush, "Linear", { 0: "rgb(150, 150, 250)", 0.5: "rgb(86, 86, 186)", 1: "rgb(86, 86, 186)" });
    var greengrad = GO(go.Brush, "Linear", { 0: "rgb(158, 209, 159)", 1: "rgb(67, 101, 56)" });
    var redgrad = GO(go.Brush, "Linear", { 0: "rgb(206, 106, 100)", 1: "rgb(180, 56, 50)" });
    var yellowgrad = GO(go.Brush, "Linear", { 0: "rgb(254, 221, 50)", 1: "rgb(254, 182, 50)" });
    var lightgrad = GO(go.Brush, "Linear", { 1: "#E6E6FA", 0: "#FFFAF0" });


    /**
     * Any node that doesnt have category falls into this category
     * *** Ideally all nodes should fall into some category
     */
    myDiagram.nodeTemplateMap.add("",  GO(go.Node,
                    "Spot",  // panel type
                    nodeStyle(), // location
                    // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                    GO(go.Panel, "Auto",
                            GO(go.Shape, "Rectangle",
                                    { fill: "#00A9C9", stroke: null },
                                    new go.Binding("figure", "figure")),

                                    // overside shape from node object
                            GO(go.TextBlock,
                                    {
                                        font: "bold 11pt Helvetica, Arial, sans-serif",
                                        stroke: lightText,
                                        margin: 8,
                                        maxSize: new go.Size(100, NaN),
                                        wrap: go.TextBlock.WrapFit,
                                        editable: true
                                    },
                                    new go.Binding("text").makeTwoWay()) // can edit node text
                    ),
                    // four named ports, one on each side:
                    makePort("T", go.Spot.Top, false, true),
                    makePort("L", go.Spot.Left, true, true),
                    makePort("R", go.Spot.Right, true, true),
                    makePort("B", go.Spot.Bottom, true, false)
            ));


    myDiagram.nodeTemplateMap.add("Start",
            GO(go.Node, "Spot", nodeStyle(),
                    GO(go.Panel, "Auto",
                            GO(go.Shape, "Circle",
                                    { minSize: new go.Size(40, 40), fill: "#79C900", stroke: null
                                    }),
                            GO(go.TextBlock, "Start",
                                    { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                                    new go.Binding("text"))
                    ),
                    // three named ports, one on each side except the top, all output only:
                    makePort("L", go.Spot.Left, true, false),
                    makePort("R", go.Spot.Right, true, false),
                    makePort("B", go.Spot.Bottom, true, false),
                    {doubleClick: editNode}
            ));

    myDiagram.nodeTemplateMap.add("End",
            GO(go.Node, "Spot", nodeStyle(),
                    GO(go.Panel, "Auto",
                            GO(go.Shape, "Circle",
                                    { minSize: new go.Size(40, 40), fill: "#DC3C00", stroke: null }),
                            GO(go.TextBlock, "End",
                                    { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                                    new go.Binding("text"))
                    ),
                    // three named ports, one on each side except the bottom, all input only:
                    makePort("T", go.Spot.Top, false, true),
                    makePort("L", go.Spot.Left, false, true),
                    makePort("R", go.Spot.Right, false, true)
            ));

    myDiagram.nodeTemplateMap.add("Comment",
            GO(go.Node, "Auto", nodeStyle(),
                    GO(go.Shape, "File",
                            { fill: "#EFFAB4", stroke: null }),
                    GO(go.TextBlock,
                            {
                                margin: 5,
                                maxSize: new go.Size(200, NaN),
                                wrap: go.TextBlock.WrapFit,
                                textAlign: "center",
                                editable: true,
                                font: "bold 12pt Helvetica, Arial, sans-serif",
                                stroke: '#454545'
                            },
                            new go.Binding("text").makeTwoWay())
                    // no ports, because no links are allowed to connect with a comment
            ));


   // This template is a Panel that is used to represent each item in a Panel.itemArray.
      // The Panel is data bound to the item object.
      var fieldTemplate =
        GO(go.Panel, "TableRow",  // this Panel is a row in the containing Table
          new go.Binding("portId", "name"),  // this Panel is a "port"
          {
            background: "transparent",  // so this port's background can be picked by the mouse
            fromSpot: go.Spot.Right,  // links only go from the right side to the left side
            toSpot: go.Spot.Left,
            // allow drawing links from or to this port:
            fromLinkable: true, toLinkable: true
          },
          GO(go.Shape,
            { width: 12, height: 12, column: 0, strokeWidth: 2, margin: 4,
              // but disallow drawing links from or to this shape:
              fromLinkable: false, toLinkable: false },
            new go.Binding("figure", "figure"),
            new go.Binding("fill", "color")),
          GO(go.TextBlock,
            { margin: new go.Margin(0, 2), column: 1, font: "bold 13px sans-serif",
              // and disallow drawing links from or to this text:
              fromLinkable: false, toLinkable: false },
            new go.Binding("text", "name")),
          GO(go.TextBlock,
            { margin: new go.Margin(0, 2), column: 2, font: "13px sans-serif" },
            new go.Binding("text", "info"))
        );
    
       myDiagram.nodeTemplateMap.add("File",
         GO(go.Node, "Auto",
          { movable: true,
            copyable: false,
            deletable: true },
          new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
          // this rectangular shape surrounds the content of the node
          GO(go.Shape,
            { fill: "#EEEEEE" }),
          // the content consists of a header and a list of items
          GO(go.Panel, "Vertical",
            // this is the header for the whole node
            GO(go.Panel, "Auto",
              { stretch: go.GraphObject.Horizontal },  // as wide as the whole node
              GO(go.Shape,
                { fill: "#1570A6", stroke: null }),
              GO(go.TextBlock,
                {
                  alignment: go.Spot.Center,
                  margin: 3,
                  stroke: "white",
                  textAlign: "center",
                  font: "bold 12pt sans-serif"
                },
                new go.Binding("text", "key"))),
            // this Panel holds a Panel for each item object in the itemArray;
            // each item Panel is defined by the itemTemplate to be a TableRow in this Table
            GO(go.Panel, "Table",
              {
                padding: 2,
                minSize: new go.Size(100, 10),
                defaultStretch: go.GraphObject.Horizontal,
                itemTemplate: fieldTemplate
              },
              new go.Binding("itemArray", "fields")
            )  // end Table Panel of items
          )  // end Vertical Panel
          ,new go.Binding("doubleClick", "editNode")
          //,{doubleClick: editNode}
        ) 
        );
  
  

    // replace the default Link template in the linkTemplateMap
    myDiagram.linkTemplate =
            GO(go.Link,  // the whole link panel
                    {
                        routing: go.Link.AvoidsNodes,
                        curve: go.Link.JumpOver,
                        corner: 5, toShortLength: 4,
                        relinkableFrom: true,
                        relinkableTo: true,
                        reshapable: true,
                        resegmentable: true,
                        // mouse-overs subtly highlight links:
                        mouseEnter: function(e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
                        mouseLeave: function(e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; }
                    },
                    new go.Binding("points").makeTwoWay(),
                    GO(go.Shape,  // the highlight shape, normally transparent
                            { isPanelMain: true, strokeWidth: 8, stroke: "transparent", name: "HIGHLIGHT" }),
                    GO(go.Shape,  // the link path shape
                            { isPanelMain: true, stroke: "gray", strokeWidth: 2 }),
                    GO(go.Shape,  // the arrowhead
                            { toArrow: "standard", stroke: null, fill: "gray"}),
                    GO(go.Panel, "Auto",  // the link label, normally not visible
                            { visible: false, name: "LABEL", segmentIndex: 2, segmentFraction: 0.5},
                            new go.Binding("visible", "visible").makeTwoWay(),
                            GO(go.Shape, "RoundedRectangle",  // the label shape
                                    { fill: "#F8F8F8", stroke: null }),
                            GO(go.TextBlock, "Yes",  // the label
                                    {
                                        textAlign: "center",
                                        font: "10pt helvetica, arial, sans-serif",
                                        stroke: "#333333",
                                        editable: true
                                    },
                                    new go.Binding("text", "text").makeTwoWay())
                    )
            );


    // Make link labels visible if coming out of a "conditional" node.
    // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
    function showLinkLabel(e) {
        var label = e.subject.findObject("LABEL");
        if (label !== null) label.visible = (e.subject.fromNode.data.figure === "Diamond");
    }

    // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
    myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
    myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;

    load();  // load an initial diagram from some JSON text

    // initialize the Palette that is on the left side of the page
    myPalette =
            GO(go.Palette, "myPalette",  // must name or refer to the DIV HTML element
                    {
                        "animationManager.duration": 600
                        , // slightly longer than default (600ms) animation
                        nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
                        model: new go.GraphLinksModel([  // specify the contents of the Palette
                            { category: "Start", text: "Start" },
                            { text: "Step" },
                            { text: "???", figure: "Diamond" },
                            { category: "End", text: "End" },
                            { category: "Comment", text: "Comment" },
                            { category: "InputFile2", text: "Source", items: [ { name: "ProductID", iskey: true, figure: "Decision", color: yellowgrad },
                                { name: "ProductName", iskey: false, figure: "Cube1", color: bluegrad },
                                { name: "SupplierID", iskey: false, figure: "Decision", color: "purple" },
                                { name: "CategoryID", iskey: false, figure: "Decision", color: "purple" } ] }
                        ])
                    });
 
  // Make all ports on a node visible when the mouse is over the node
  function showPorts(node, show) {
    var diagram = node.diagram;
    if (!diagram || diagram.isReadOnly || !diagram.allowLink) return;
    node.ports.each(function(port) {
        port.stroke = (show ? "white" : null);
    });}
  // Show the diagram's model in JSON format that the user may edit
  function save() {
      var savedModel  = myDiagram.model.toJson();
      event.preventDefault();
      $.ajax({
          type:    "POST",
          url:     "/api/savemodel",
          data:    {model:savedModel},
          success: function(data) {
                alert('call back');
          },
          // vvv---- This is the new bit
          error:   function(jqXHR, textStatus, errorThrown) {
                alert("Error, status = " + textStatus + ", " +
                      "error thrown: " + errorThrown
                );
          }
        });

     myDiagram.isModified = false;     
        }
  
  function load() {
    // initial model 
    // phase-2 get it server    
    myDiagram.model = go.Model.fromJson(PackageModel);}

    </script>
  </body>
</html>